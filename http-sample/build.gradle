apply plugin: 'com.android.application'
apply plugin:'bbk_checker'

def buildTime = new Date().format("yyyy-MM-dd HH:mm:ss", TimeZone.getTimeZone("GMT+8"))
android {
    compileSdkVersion bfcBuildConfig.compileSdkVersion
    buildToolsVersion '25.0.0'

    signingConfigs {
        release {
            keyAlias 'eebbkopen'
            keyPassword 'eebbkopen'
            storeFile file('keystore.jks')
            storePassword 'eebbkopen'
        }
    }
    defaultConfig {
        applicationId rootProject.ext.android.applicationId

        minSdkVersion bfcBuildConfig.minSdkVersion
        targetSdkVersion bfcBuildConfig.targetSdkVersion
        versionCode VERSION_CODE
        versionName VERSION_NAME

        buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""

//        jackOptions {
//            enabled true
//        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {}
    }
//    compileOptions {
//        sourceCompatibility JavaVersion.VERSION_1_8
//        targetCompatibility JavaVersion.VERSION_1_8
//    }

    // 修改apk名称，并放到apk目录下
    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('-release.apk')) {
                def fileName = outputFile.name;
                fileName = fileName.replace("-release.apk", "-unencrypted.apk")
                fileName = fileName.replace("http-sample", "BfcHttpDemo")
                output.outputFile = new File(file('./../apk'), fileName)
                println "output： " + output.outputFile
            }
        }
    }

    lintOptions {
        abortOnError false
    }

    dataBinding {
        enabled = true
    }
}
dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':http-main')
//    compile rootProject.ext.dependencies["bfc-http"]

    compile bfcBuildConfig.deps.'bfc-sequencetools-json'


    debugCompile bfcBuildConfig.deps.'bfc-leakcanary'
    debugCompile bfcBuildConfig.deps.'bfc-blockcanary'
    releaseCompile bfcBuildConfig.deps.'bfc-leakcanary-no-op'
    releaseCompile bfcBuildConfig.deps.'bfc-blockcanary-no-op'
}
